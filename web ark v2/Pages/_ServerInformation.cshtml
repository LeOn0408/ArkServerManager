@inject ApplicationContext db
@{

    List<ServerApi> servers;
    try
    {
        var api =db.APISetting.Where(x => x.ID == 1).FirstOrDefault().ApiHost;
        string json = new WebClient().DownloadString(api);
        servers = JsonConvert.DeserializeObject<List<ServerApi>>(json);
    }
    catch
    {
        servers = new() { new ServerApi { Id = -1, Name = "Информация не доступна" } };
    }
    
}
@foreach(ServerApi server in servers)
{
    <div class="iplist">
        <b style="text-align: center; width: 100%; float: left; ">@server.Name</b>
        <br>Карта:
        <span style="color: white; float: right;">
            @server.Map
        </span>
        <br>Адрес:
        <a href="steam://connect/@server.RemoteIP:@server.RemotePort" style="color: white; float: right;">
            @server.RemoteIP:@server.RemotePort
        </a>
        <br>Текущая версия:
        <b style="color: red; float: right; ">
            @server.Version
        </b>
        <br>Статус сервера:
        @if (server.Id > 0)
        {
            <font style='color: greenyellow;float: right;'>Работает</font>
        }
         else {
            <font style='color: red;float: right;'>Недоступен</font>
        }
        @if (server.Players.FirstOrDefault().Id == "0")//Если ошибка или нет игроков то прилетает всегда 1 игрок с ид <=0
        {
            @Html.Raw("<br>Список игроков(0): <br>Нет игроков")
    }
        else
        {
             @Html.Raw("<br>Активных игроков:<b style=\"float: right;color: greenyellow;\">" + @server.Players.Count + "</b> <br>")
             foreach (var player in @server.Players)
                    {
                        @Html.Raw("\"" + player.User + "\" ")
                    }
        }

    </div>
}