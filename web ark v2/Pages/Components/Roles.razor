@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.RazorPages
@using System.ComponentModel.DataAnnotations
@inject RoleManager<IdentityRole> _roleManager
@inject UserManager<ArkUsers> _userManager

<h2>Список ролей</h2>





@foreach (var role in @roles)
{
    <tr>
        <td>@role.Name</td>
        <td>
            <form>
                <button @onclick="@(async () => await Delete(role.Id))">Удалить</button>

            </form>
        </td>
    </tr>
}

<div class="form-group">

    <label for="name">Новая роль</label>
    <input @bind="@group" />
</div>
<button @onclick="@(async () => await Create())">Добавить</button>

<h2>Список пользователей</h2>


@*<button @onclick="UserList">Список пользователей</button>*@


@code {

    string group;
    List<IdentityRole> roles;

    protected override void OnInitialized()
    {
        roles = _roleManager.Roles.ToList();

    }

    private async Task Delete(string id)
    {
        IdentityRole role = await _roleManager.FindByIdAsync(id);
        if (role != null)
        {
            IdentityResult result = await _roleManager.DeleteAsync(role);
            roles = _roleManager.Roles.ToList();
        }

    }
    private async Task UserList()
    {


    }

    private async Task Create()
    {
        if (!string.IsNullOrEmpty(group))
        {

            IdentityResult result = await _roleManager.CreateAsync(new IdentityRole(group));
            if (result.Succeeded)
            {
                roles = _roleManager.Roles.ToList();

            }
            else
            {

            }
        }

    }


}
